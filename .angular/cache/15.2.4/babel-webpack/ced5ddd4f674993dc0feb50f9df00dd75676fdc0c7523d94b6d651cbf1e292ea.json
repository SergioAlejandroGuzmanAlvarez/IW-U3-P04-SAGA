{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet Tab2Page = class Tab2Page {\n  constructor(prodServ, cateServ, alertController, toastController, modalController, fb) {\n    this.prodServ = prodServ;\n    this.cateServ = cateServ;\n    this.alertController = alertController;\n    this.toastController = toastController;\n    this.modalController = modalController;\n    this.fb = fb;\n    this.isModalUnoOpen = false;\n    this.isModalDosOpen = false;\n    this.productos = [];\n    this.fProductos = [];\n    this.categorias = [];\n    this.opiniones = [];\n    this.formCalif = this.fb.group({});\n    this.activeProd = [];\n    this.categorias = this.cateServ.getCatego();\n    this.productos = this.prodServ.getProductos();\n    this.fProductos = this.productos;\n    this.limpiarFormulario();\n    this.validationMessages = {\n      'calification': [{\n        type: 'required',\n        message: 'Calificación requerida!'\n      }, {\n        type: 'min',\n        message: 'El minimo es cero!'\n      }, {\n        type: 'max',\n        message: 'El maximo es cinco!'\n      }]\n    };\n  }\n  limpiarFormulario() {\n    this.formCalif = this.fb.group({\n      name: [\"\"],\n      coment: [\"\"],\n      calification: [\"\", Validators.compose([Validators.required, Validators.min(0), Validators.max(5)])],\n      fecha: [new Date()]\n    });\n  }\n  getColor(type) {\n    switch (type) {\n      case 'Atrapa Sueños':\n        return 'danger';\n      case 'Mandala':\n        return 'success';\n      case 'Ojos de Dios':\n        return 'warning';\n      default:\n        return 'primary';\n    }\n  }\n  getColorStock(stock) {\n    if (stock > 0) return 'success';else return 'danger';\n  }\n  filter(dato) {\n    if (!dato.trim()) {\n      this.fProductos = this.productos;\n      return;\n    }\n    this.fProductos = this.productos.filter(prod => prod.name.toLowerCase().includes(dato.toLowerCase()));\n  }\n  filterProduct(event) {\n    if (event instanceof CustomEvent) {\n      this.filter(event.detail.value);\n    }\n  }\n  setModalUnoOpen(isOpen) {\n    this.isModalUnoOpen = isOpen;\n    if (!this.isModalUnoOpen) {\n      this.activeProd[0] = \"\";\n      this.activeProd[1] = \"\";\n    }\n  }\n  setModalDosOpen(isOpen) {\n    this.isModalDosOpen = isOpen;\n    if (!this.isModalUnoOpen) {\n      this.activeProd[0] = \"\";\n      this.activeProd[1] = \"\";\n      this.opiniones = [];\n    }\n  }\n  setActiveProd(prod) {\n    this.activeProd[0] = prod.sku;\n    this.activeProd[1] = prod.name;\n    this.opiniones = prod.calification;\n  }\n  addCalif() {\n    const pos = this.productos.findIndex(p => p.sku == this.activeProd[0]);\n    this.productos[pos].calification.push(this.formCalif.getRawValue());\n    const _prod = this.productos[pos];\n    this.prodServ.uploadProduct(_prod);\n    this.setModalUnoOpen(false);\n    this.limpiarFormulario();\n  }\n  getPromedio(calificaciones) {\n    if (calificaciones.length === 0) {\n      return {\n        promedio: 0,\n        cantidad: 0\n      };\n    }\n    const suma = calificaciones.reduce((a, b) => a + b.calification, 0);\n    const promedio = suma / calificaciones.length;\n    return {\n      promedio: +promedio.toFixed(1),\n      cantidad: calificaciones.length\n    };\n  }\n};\n__decorate([ViewChild('ionBusqueda')], Tab2Page.prototype, \"busqueda\", void 0);\nTab2Page = __decorate([Component({\n  selector: 'app-tab2',\n  templateUrl: 'tab2.page.html',\n  styleUrls: ['tab2.page.scss']\n})], Tab2Page);\nexport { Tab2Page };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}